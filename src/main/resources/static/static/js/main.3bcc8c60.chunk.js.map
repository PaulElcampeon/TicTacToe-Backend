{"version":3,"sources":["components/HomePageComponent.js","components/WaitingScreen.js","components/BoardComponent.js","components/GamePageComponent.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRedirect","setState","redirect","renderRedirectToGamePage","state","portNo","react_default","a","createElement","react_router","to","pathname","port","getPortNo","fetch","then","res","text","data","className","onClick","Component","WaitingScreen","dotCounter","_this2","myInterval","setInterval","length","clearInterval","blockPos","xPos","yPos","x","y","BoardComponent","props","renderBoard","mounted","sortOutBoardSize","canvas","removeEventListener","clicky","ctx","clearRect","canvasWidth","canvasHeight","board","blocks","forEach","block","index","beginPath","lineWidth","strokeStyle","rect","blockPositions","blockWidth","blockHeight","fillStyle","fill","stroke","font","textAlign","fillText","renderCorrectSign","blockState","addEventListener","e","offsetY","offsetX","whosTurn","name","sendBoardAction","playerName","gameId","blockNo","handleResize","windowHeight","window","innerHeight","windowWidth","innerWidth","width","getSmallestSize","height","push","size","getWhosTurn","gameInformation","sign","refs","getContext","ref","GamePage","subscribeToNewGameSession","gameSessionSubscription","stompClient","subscribe","gameSession","JSON","parse","body","messageType","gamesSession","gameState","winner","noWinner","setGameSessionToState","playerDisconnected","joinGame","publish","destination","stringify","showLoading","components_WaitingScreen","components_BoardComponent","action","winnerMessage","returnWinnerName","playAgain","noGameWinnerMessage","showOtherPlayerDisconnectedMessage","setConnectedState","connected","startAutomatedMessages","Client","brokerURL","debug","str","connect","onConnect","frame","headers","privateSubscription","unsubscribe","ack","onStompError","console","log","activate","createStompClient","Error","react_router_dom","App","path","exact","strict","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3bcc8c60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\nclass HomePage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.portNo = 0;\r\n    this.state = {\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n\r\n  renderRedirectToGamePage = () => {\r\n    if (this.state.redirect && this.portNo !== 0) {\r\n      return <Redirect to={{\r\n        pathname: '/game',\r\n        port: this.portNo\r\n    }} />\r\n    }\r\n  }\r\n\r\n  getPortNo = () => {\r\n    fetch('../port')\r\n      .then((res) => res.text())\r\n      .then((data) => {\r\n        this.portNo = data;\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"text-white mainDiv\">\r\n        {this.getPortNo()}\r\n        {this.renderRedirectToGamePage()}\r\n        <h1 className=\"text-white mt-5 titleTextSize specialFont\">Tic Tac Toe</h1>\r\n        <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.setRedirect}>PLAY</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default HomePage;\r\n","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass WaitingScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dotCounter: \".\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <h1 className=\"m-auto waitingTextSize specialFont\">Finding another player {this.state.dotCounter}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.state.dotCounter.length > 6) {\r\n                this.setState({\r\n                    dotCounter: \".\"\r\n                })\r\n            } else {\r\n                this.setState( {\r\n                    dotCounter: this.state.dotCounter+\".\"\r\n                })\r\n            }\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n}\r\n\r\nexport default WaitingScreen;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nconst blockPos = (xPos, yPos) => {\r\n    return { x: xPos, y: yPos }\r\n}\r\n\r\nclass BoardComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mounted = false;\r\n        this.state = {\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        }\r\n    }\r\n\r\n    renderCorrectSign(sign) {\r\n        if (sign === \"EMPTY\") {\r\n            return \"\"\r\n        } else if (sign === \"NOUGHT\") {\r\n            return \"O\"\r\n        } else {\r\n            return \"X\"\r\n        }\r\n    }\r\n\r\n    renderBoard = () => {\r\n        if (this.mounted) {\r\n            this.sortOutBoardSize()\r\n            this.canvas.removeEventListener('click', this.clicky)\r\n            this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n            this.props.board.blocks.forEach((block, index) => {\r\n                this.ctx.beginPath();\r\n                this.ctx.lineWidth = \"6\";\r\n                this.ctx.strokeStyle = \"white\";\r\n                this.ctx.rect(this.blockPositions[index].x, this.blockPositions[index].y, this.blockWidth, this.blockHeight)\r\n                this.ctx.fillStyle = \"red\";\r\n                this.ctx.fill();\r\n                this.ctx.stroke();\r\n\r\n                this.ctx.beginPath();\r\n                this.ctx.font = \"30px Comic Sans MS\";\r\n                this.ctx.fillStyle = \"white\";\r\n                this.ctx.textAlign = \"center\";\r\n                this.ctx.fillText(this.renderCorrectSign(block.blockState), (this.blockPositions[index].x + this.blockWidth / 2), (this.blockPositions[index].y + this.blockHeight / 2));\r\n            });\r\n\r\n            this.canvas.addEventListener('click', this.clicky)\r\n\r\n        }\r\n    }\r\n\r\n    clicky = (e) => {\r\n        this.props.board.blocks.forEach((block, index) => {\r\n            if (e.offsetY > this.blockPositions[index].y && e.offsetY < this.blockPositions[index].y + this.blockHeight\r\n                && e.offsetX > this.blockPositions[index].x && e.offsetX < this.blockPositions[index].x + this.blockWidth\r\n                && block.blockState === \"EMPTY\" && this.props.whosTurn === this.props.name) {\r\n                this.props.sendBoardAction({ playerName: this.props.name, gameId: this.props.gameId, blockNo: index })\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = this.refs.canvas\r\n        this.ctx = this.canvas.getContext(\"2d\")\r\n        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n        this.mounted = true\r\n        this.renderBoard()\r\n        this.handleResize();\r\n        window.addEventListener('resize', this.handleResize)\r\n    }\r\n\r\n    handleResize = () => this.setState({\r\n        windowHeight: window.innerHeight,\r\n        windowWidth: window.innerWidth\r\n    });\r\n\r\n    sortOutBoardSize = () => {        \r\n        this.canvas.width = this.getSmallestSize() - 50;\r\n        this.canvas.height = this.getSmallestSize() - 50;\r\n\r\n        this.canvasWidth = this.canvas.width;\r\n        this.canvasHeight = this.canvas.height;\r\n        this.blockWidth = this.canvasWidth / 3;\r\n        this.blockHeight = this.canvasHeight / 3;\r\n        this.blockPositions = [];\r\n\r\n        for (var y = 0; y < 3; y++) {\r\n            for (var x = 0; x < 3; x++) {\r\n                this.blockPositions.push(blockPos(this.blockWidth * x, this.blockHeight * y))\r\n            }\r\n        }\r\n    }\r\n\r\n    getSmallestSize = () => {\r\n        let size = this.state.windowHeight < this.state.windowWidth? this.state.windowHeight : this.state.windowWidth\r\n        return size > 630? 550 : size\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize)\r\n    }\r\n\r\n\r\n    getWhosTurn = () => {\r\n        return this.props.whosTurn === this.props.name ? \"Your Turn\" : \"Opponents Turn\"\r\n    }\r\n\r\n    gameInformation = () => {\r\n        return (\r\n            <h1 className=\"text-white text-center mb-5 pb-5 titleTextSize specialFont\">\r\n                {this.getWhosTurn()}\r\n            </h1>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"m-auto\">\r\n                {this.gameInformation()}\r\n                <canvas ref=\"canvas\" width={500} height={500} />\r\n                {this.renderBoard()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BoardComponent;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport WaitingScreen from '../components/WaitingScreen'\r\nimport BoardComponent from '../components/BoardComponent'\r\nimport { Client } from '@stomp/stompjs';\r\n\r\n\r\nclass GamePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.name = \"\";\r\n        this.winner = null;\r\n        this.noWinner = false;\r\n        this.playerDisconnected = false;\r\n        this.gameSessionSubscription = null;\r\n        this.state = {\r\n            connected: false,\r\n            gameSession: null\r\n        }\r\n    }\r\n\r\n    createStompClient() {\r\n        if (!this.state.connected) {\r\n            this.stompClient = new Client({\r\n                brokerURL: \"wss://localhost:\"+this.props.port+\"/ticTacToe\",\r\n                debug: (str) => {\r\n                    //do nothing\r\n                    // console.log(str);\r\n                }\r\n            });\r\n\r\n            this.connect()\r\n        }\r\n    }\r\n\r\n    connect() {\r\n        this.stompClient.onConnect = (frame) => {\r\n            this.name = frame.headers.name;\r\n\r\n            this.privateSubscription = this.stompClient.subscribe(\"/queue/\" + this.name, (data) => {\r\n                this.setGameSessionToState(JSON.parse(data.body))\r\n                if (this.gameSessionSubscription !== null) {\r\n                    this.gameSessionSubscription.unsubscribe()\r\n                    this.subscribeToNewGameSession()\r\n                } else {\r\n                    this.subscribeToNewGameSession()\r\n                }\r\n                data.ack();\r\n            });\r\n            this.joinGame()\r\n            this.startAutomatedMessages()\r\n            this.setConnectedState(true)\r\n            // Do something, all subscribes must be done is this callback\r\n            // This is needed because this will be executed after a (re)connect\r\n        };\r\n\r\n        this.stompClient.onStompError = function (frame) {\r\n            // Will be invoked in case of error encountered at Broker\r\n            // Bad login/passcode typically will cause an error\r\n            // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n            // Compliant brokers will terminate the connection after any error\r\n            console.log('Broker reported error: ' + frame.headers['message']);\r\n            console.log('Additional details: ' + frame.body);\r\n        };\r\n\r\n        this.stompClient.activate();\r\n    }\r\n\r\n    subscribeToNewGameSession = () => {\r\n        this.gameSessionSubscription = this.stompClient.subscribe(\"/topic/\" + this.state.gameSession.gameId, (data) => {\r\n            if (JSON.parse(data.body).messageType === \"GAMESESSION\") {\r\n                let gamesSession = JSON.parse(data.body)\r\n                if (gamesSession.gameState === \"ENDED\") {\r\n                    if (gamesSession.winner === null) {\r\n                        this.winner = null;\r\n                        this.noWinner = true;\r\n                    } else {\r\n                        this.noWinner = false;\r\n                        this.winner = gamesSession.winner\r\n                    }\r\n                    this.setGameSessionToState(null)\r\n                } else {\r\n                    this.setGameSessionToState(JSON.parse(data.body))\r\n                }\r\n            } else if (JSON.parse(data.body).messageType === \"DISCONNECT\") {\r\n                this.playerDisconnected = true;\r\n                this.winner = null\r\n                this.noWinner = false\r\n                this.setGameSessionToState(null)\r\n            }\r\n        });\r\n    }\r\n\r\n    joinGame = () => {\r\n        this.stompClient.publish({destination:\"/app/join\", body:JSON.stringify({ playerName: this.name })})\r\n    }\r\n\r\n    showLoading = () => {\r\n        if (this.state.gameSession == null && this.winner === null && this.noWinner === false && this.playerDisconnected === false) {\r\n            return (\r\n                <WaitingScreen />\r\n            )\r\n        }\r\n    }\r\n\r\n    renderBoard = () => {\r\n        if (this.state.gameSession != null) {\r\n            return (\r\n                <BoardComponent name={this.name} whosTurn={this.state.gameSession.whosTurn} gameId={this.state.gameSession.gameId} board={this.state.gameSession.board} sendBoardAction={this.sendBoardAction} />\r\n            )\r\n        }\r\n    }\r\n\r\n    sendBoardAction = (action) => {\r\n        this.stompClient.publish({destination:\"/app/act/\" + this.state.gameSession.gameId, body:JSON.stringify(action)})\r\n    }\r\n\r\n    winnerMessage = () => {\r\n        if (this.winner != null) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        {this.returnWinnerName()}\r\n                    </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    noGameWinnerMessage = () => {\r\n        if (this.noWinner) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        No Winner\r\n                </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    returnWinnerName = () => {\r\n        if (this.winner === this.name) {\r\n            return \"You Win\"\r\n        } else {\r\n            return \"You Lost\"\r\n        }\r\n    }\r\n\r\n    showOtherPlayerDisconnectedMessage = () => {\r\n        if (this.playerDisconnected) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        Other player disconnected from game\r\n                </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    playAgain = () => {\r\n        this.playerDisconnected = false\r\n        this.winner = null\r\n        this.noWinner = false\r\n        this.setGameSessionToState(null)\r\n        this.joinGame()\r\n    }\r\n\r\n    setGameSessionToState = (state) => {\r\n        this.setState({\r\n            gameSession: state\r\n        })\r\n    }\r\n\r\n    setConnectedState = (state) => {\r\n        this.setState({\r\n            connected: state\r\n        })\r\n    }\r\n\r\n    //Due to heroku routers closing connections that have been idle for 55 seconds or more\r\n    startAutomatedMessages = () => {\r\n        this.myInterval = setInterval(() => {\r\n            this.stompClient.publish({destination:\"/topic/empty\", body:\"\"})\r\n        },50000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-white mainDiv\">\r\n                {this.createStompClient()}\r\n                {this.showLoading()}\r\n                {this.renderBoard()}\r\n                {this.winnerMessage()}\r\n                {this.noGameWinnerMessage()}\r\n                {this.showOtherPlayerDisconnectedMessage()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GamePage;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport HomePage from './components/HomePageComponent';\r\nimport GamePage from './components/GamePageComponent';\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-white mt-5 titleTextSize specialFont\">Error</h1>\r\n      <br></br>\r\n      <Link className=\"text-white mt-5 waitingTextSize\" to=\"/\">Back To Home Page</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n          <Switch>\r\n          <Route path={[\"/\",\"/home\"]} exact strict component={HomePage} />\r\n          <Route path=\"/game\" exact strict component={GamePage} />\r\n          <Route component={Error} />\r\n          </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}