{"version":3,"sources":["components/HomePageComponent.js","components/WaitingScreen.js","components/BoardComponent.js","components/GamePageComponent.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRedirect","setState","redirect","renderRedirectToGamePage","state","react_default","a","createElement","react_router","to","className","onClick","Component","WaitingScreen","dotCounter","_this2","myInterval","setInterval","length","clearInterval","blockPos","xPos","yPos","x","y","BoardComponent","props","renderBoard","mounted","sortOutBoardSize","canvas","removeEventListener","clicky","ctx","clearRect","canvasWidth","canvasHeight","board","blocks","forEach","block","index","beginPath","lineWidth","strokeStyle","rect","blockPositions","blockWidth","blockHeight","fillStyle","fill","stroke","font","textAlign","fillText","renderCorrectSign","blockState","addEventListener","e","offsetY","offsetX","whosTurn","name","sendBoardAction","playerName","gameId","blockNo","handleResize","windowHeight","window","innerHeight","windowWidth","innerWidth","width","getSmallestSize","height","push","size","getWhosTurn","gameInformation","sign","refs","getContext","ref","GamePage","subscribeToNewGameSession","gameSessionSubscription","stompClient","subscribe","gameSession","JSON","parse","body","messageType","gamesSession","gameState","winner","noWinner","setGameSessionToState","playerDisconnected","joinGame","publish","destination","stringify","showLoading","components_WaitingScreen","components_BoardComponent","action","winnerMessage","returnWinnerName","playAgain","noGameWinnerMessage","showOtherPlayerDisconnectedMessage","setConnectedState","connected","startAutomatedMessages","Client","brokerURL","location","port","debug","str","connect","onConnect","frame","headers","privateSubscription","unsubscribe","ack","onStompError","activate","createStompClient","Error","react_router_dom","App","path","exact","strict","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df0bbdb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\nclass HomePage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n\r\n  renderRedirectToGamePage = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/game' />\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"text-white mainDiv\">\r\n           {this.renderRedirectToGamePage()}\r\n        <h1 className=\"text-white mt-5 titleTextSize specialFont\">Tic Tac Toe</h1>\r\n        <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.setRedirect}>PLAY</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default HomePage;\r\n","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass WaitingScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dotCounter: \".\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <h1 className=\"m-auto waitingTextSize specialFont\">Finding another player {this.state.dotCounter}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.state.dotCounter.length > 6) {\r\n                this.setState({\r\n                    dotCounter: \".\"\r\n                })\r\n            } else {\r\n                this.setState( {\r\n                    dotCounter: this.state.dotCounter+\".\"\r\n                })\r\n            }\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n}\r\n\r\nexport default WaitingScreen;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nconst blockPos = (xPos, yPos) => {\r\n    return { x: xPos, y: yPos }\r\n}\r\n\r\nclass BoardComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mounted = false;\r\n        this.state = {\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        }\r\n    }\r\n\r\n    renderCorrectSign(sign) {\r\n        if (sign === \"EMPTY\") {\r\n            return \"\"\r\n        } else if (sign === \"NOUGHT\") {\r\n            return \"O\"\r\n        } else {\r\n            return \"X\"\r\n        }\r\n    }\r\n\r\n    renderBoard = () => {\r\n        if (this.mounted) {\r\n            this.sortOutBoardSize()\r\n            this.canvas.removeEventListener('click', this.clicky)\r\n            this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n            this.props.board.blocks.forEach((block, index) => {\r\n                this.ctx.beginPath();\r\n                this.ctx.lineWidth = \"6\";\r\n                this.ctx.strokeStyle = \"white\";\r\n                this.ctx.rect(this.blockPositions[index].x, this.blockPositions[index].y, this.blockWidth, this.blockHeight)\r\n                this.ctx.fillStyle = \"red\";\r\n                this.ctx.fill();\r\n                this.ctx.stroke();\r\n\r\n                this.ctx.beginPath();\r\n                this.ctx.font = \"30px Comic Sans MS\";\r\n                this.ctx.fillStyle = \"white\";\r\n                this.ctx.textAlign = \"center\";\r\n                this.ctx.fillText(this.renderCorrectSign(block.blockState), (this.blockPositions[index].x + this.blockWidth / 2), (this.blockPositions[index].y + this.blockHeight / 2));\r\n            });\r\n\r\n            this.canvas.addEventListener('click', this.clicky)\r\n\r\n        }\r\n    }\r\n\r\n    clicky = (e) => {\r\n        this.props.board.blocks.forEach((block, index) => {\r\n            if (e.offsetY > this.blockPositions[index].y && e.offsetY < this.blockPositions[index].y + this.blockHeight\r\n                && e.offsetX > this.blockPositions[index].x && e.offsetX < this.blockPositions[index].x + this.blockWidth\r\n                && block.blockState === \"EMPTY\" && this.props.whosTurn === this.props.name) {\r\n                this.props.sendBoardAction({ playerName: this.props.name, gameId: this.props.gameId, blockNo: index })\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = this.refs.canvas\r\n        this.ctx = this.canvas.getContext(\"2d\")\r\n        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n        this.mounted = true\r\n        this.renderBoard()\r\n        this.handleResize();\r\n        window.addEventListener('resize', this.handleResize)\r\n    }\r\n\r\n    handleResize = () => this.setState({\r\n        windowHeight: window.innerHeight,\r\n        windowWidth: window.innerWidth\r\n    });\r\n\r\n    sortOutBoardSize = () => {        \r\n        this.canvas.width = this.getSmallestSize() - 50;\r\n        this.canvas.height = this.getSmallestSize() - 50;\r\n\r\n        this.canvasWidth = this.canvas.width;\r\n        this.canvasHeight = this.canvas.height;\r\n        this.blockWidth = this.canvasWidth / 3;\r\n        this.blockHeight = this.canvasHeight / 3;\r\n        this.blockPositions = [];\r\n\r\n        for (var y = 0; y < 3; y++) {\r\n            for (var x = 0; x < 3; x++) {\r\n                this.blockPositions.push(blockPos(this.blockWidth * x, this.blockHeight * y))\r\n            }\r\n        }\r\n    }\r\n\r\n    getSmallestSize = () => {\r\n        let size = this.state.windowHeight < this.state.windowWidth? this.state.windowHeight : this.state.windowWidth\r\n        return size > 630? 550 : size\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize)\r\n    }\r\n\r\n\r\n    getWhosTurn = () => {\r\n        return this.props.whosTurn === this.props.name ? \"Your Turn\" : \"Opponents Turn\"\r\n    }\r\n\r\n    gameInformation = () => {\r\n        return (\r\n            <h1 className=\"text-white text-center mb-5 pb-5 titleTextSize specialFont\">\r\n                {this.getWhosTurn()}\r\n            </h1>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"m-auto\">\r\n                {this.gameInformation()}\r\n                <canvas ref=\"canvas\" width={500} height={500} />\r\n                {this.renderBoard()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BoardComponent;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport WaitingScreen from '../components/WaitingScreen'\r\nimport BoardComponent from '../components/BoardComponent'\r\nimport { Client } from '@stomp/stompjs';\r\n\r\n\r\nclass GamePage extends Component {\r\n    constructor() {\r\n        super()\r\n        this.name = \"\";\r\n        this.winner = null;\r\n        this.noWinner = false;\r\n        this.playerDisconnected = false;\r\n        this.gameSessionSubscription = null;\r\n        this.state = {\r\n            connected: false,\r\n            gameSession: null\r\n        }\r\n    }\r\n\r\n    createStompClient() {\r\n        if (!this.state.connected) {\r\n            this.stompClient = new Client({\r\n                brokerURL: \"ws://localhost:\"+window.location.port+\"/ticTacToe\",\r\n                debug: (str) => {\r\n                    //do nothing\r\n                    // console.log(str);\r\n                }\r\n            });\r\n\r\n            this.connect()\r\n        }\r\n    }\r\n\r\n    connect() {\r\n        this.stompClient.onConnect = (frame) => {\r\n            this.name = frame.headers.name;\r\n\r\n            this.privateSubscription = this.stompClient.subscribe(\"/queue/\" + this.name, (data) => {\r\n                this.setGameSessionToState(JSON.parse(data.body))\r\n                if (this.gameSessionSubscription !== null) {\r\n                    this.gameSessionSubscription.unsubscribe()\r\n                    this.subscribeToNewGameSession()\r\n                } else {\r\n                    this.subscribeToNewGameSession()\r\n                }\r\n                data.ack();\r\n            });\r\n            this.joinGame()\r\n            this.startAutomatedMessages()\r\n            this.setConnectedState(true)\r\n            // Do something, all subscribes must be done is this callback\r\n            // This is needed because this will be executed after a (re)connect\r\n        };\r\n\r\n        this.stompClient.onStompError = function (frame) {\r\n            // Will be invoked in case of error encountered at Broker\r\n            // Bad login/passcode typically will cause an error\r\n            // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n            // Compliant brokers will terminate the connection after any error\r\n            console.log('Broker reported error: ' + frame.headers['message']);\r\n            console.log('Additional details: ' + frame.body);\r\n        };\r\n\r\n        this.stompClient.activate();\r\n    }\r\n\r\n    subscribeToNewGameSession = () => {\r\n        this.gameSessionSubscription = this.stompClient.subscribe(\"/topic/\" + this.state.gameSession.gameId, (data) => {\r\n            if (JSON.parse(data.body).messageType === \"GAMESESSION\") {\r\n                let gamesSession = JSON.parse(data.body)\r\n                if (gamesSession.gameState === \"ENDED\") {\r\n                    if (gamesSession.winner === null) {\r\n                        this.winner = null;\r\n                        this.noWinner = true;\r\n                    } else {\r\n                        this.noWinner = false;\r\n                        this.winner = gamesSession.winner\r\n                    }\r\n                    this.setGameSessionToState(null)\r\n                } else {\r\n                    this.setGameSessionToState(JSON.parse(data.body))\r\n                }\r\n            } else if (JSON.parse(data.body).messageType === \"DISCONNECT\") {\r\n                this.playerDisconnected = true;\r\n                this.winner = null\r\n                this.noWinner = false\r\n                this.setGameSessionToState(null)\r\n            }\r\n        });\r\n    }\r\n\r\n    joinGame = () => {\r\n        this.stompClient.publish({destination:\"/app/join\", body:JSON.stringify({ playerName: this.name })})\r\n    }\r\n\r\n    showLoading = () => {\r\n        if (this.state.gameSession == null && this.winner === null && this.noWinner === false && this.playerDisconnected === false) {\r\n            return (\r\n                <WaitingScreen />\r\n            )\r\n        }\r\n    }\r\n\r\n    renderBoard = () => {\r\n        if (this.state.gameSession != null) {\r\n            return (\r\n                <BoardComponent name={this.name} whosTurn={this.state.gameSession.whosTurn} gameId={this.state.gameSession.gameId} board={this.state.gameSession.board} sendBoardAction={this.sendBoardAction} />\r\n            )\r\n        }\r\n    }\r\n\r\n    sendBoardAction = (action) => {\r\n        this.stompClient.publish({destination:\"/app/act/\" + this.state.gameSession.gameId, body:JSON.stringify(action)})\r\n    }\r\n\r\n    winnerMessage = () => {\r\n        if (this.winner != null) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        {this.returnWinnerName()}\r\n                    </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    noGameWinnerMessage = () => {\r\n        if (this.noWinner) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        No Winner\r\n                </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    returnWinnerName = () => {\r\n        if (this.winner === this.name) {\r\n            return \"You Win\"\r\n        } else {\r\n            return \"You Lost\"\r\n        }\r\n    }\r\n\r\n    showOtherPlayerDisconnectedMessage = () => {\r\n        if (this.playerDisconnected) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"text-white mt-5 titleTextSize specialFont\">\r\n                        Other player disconnected from game\r\n                </h1>\r\n                    <br></br>\r\n                    <button className=\"textSize btnCs m-auto p-4 btnTextSize specialFont\" onClick={this.playAgain}>Play Again</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    playAgain = () => {\r\n        this.playerDisconnected = false\r\n        this.winner = null\r\n        this.noWinner = false\r\n        this.setGameSessionToState(null)\r\n        this.joinGame()\r\n    }\r\n\r\n    setGameSessionToState = (state) => {\r\n        this.setState({\r\n            gameSession: state\r\n        })\r\n    }\r\n\r\n    setConnectedState = (state) => {\r\n        this.setState({\r\n            connected: state\r\n        })\r\n    }\r\n\r\n    //Due to heroku routers closing connections that have been idle for 55 seconds or more\r\n    startAutomatedMessages = () => {\r\n        this.myInterval = setInterval(() => {\r\n            this.stompClient.publish({destination:\"/topic/empty\", body:\"\"})\r\n        },50000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-white mainDiv\">\r\n                {this.createStompClient()}\r\n                {this.showLoading()}\r\n                {this.renderBoard()}\r\n                {this.winnerMessage()}\r\n                {this.noGameWinnerMessage()}\r\n                {this.showOtherPlayerDisconnectedMessage()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GamePage;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport HomePage from './components/HomePageComponent';\r\nimport GamePage from './components/GamePageComponent';\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-white mt-5 titleTextSize specialFont\">Error</h1>\r\n      <br></br>\r\n      <Link className=\"text-white mt-5 waitingTextSize\" to=\"/\">Back To Home Page</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n          <Switch>\r\n          <Route path={[\"/\",\"/home\"]} exact strict component={HomePage} />\r\n          <Route path=\"/game\" exact strict component={GamePage} />\r\n          <Route component={Error} />\r\n          </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}